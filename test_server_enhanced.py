#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–∏ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (TTY) - –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
2. STDIO —Ä–µ–∂–∏–º - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ pipes
3. TCP —Ä–µ–∂–∏–º - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏.
"""

import json
import subprocess
import sys
import socket
import threading
import time
import io
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8 –¥–ª—è Windows
if sys.platform == "win32":
    try:
        import io
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫–∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º
        if not sys.stdin.closed:
            sys.stdin = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8')
        if not sys.stdout.closed:
            sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
        if not sys.stderr.closed:
            sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')
    except (AttributeError, ValueError, OSError):
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ—Ç–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        pass


def safe_print(message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π I/O –æ—à–∏–±–æ–∫"""
    try:
        print(message)
    except (ValueError, OSError, UnicodeEncodeError, UnicodeDecodeError):
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ I/O, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        pass
    except Exception:
        # –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        pass


def send_message_stdio(proc, data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å STDIO —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π UTF-8"""
    if proc.stdin is None:
        print("‚ö†Ô∏è  –û—à–∏–±–∫–∞: stdin –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return
        
    data_str = json.dumps(data, ensure_ascii=False)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏–Ω—É –≤ –±–∞–π—Ç–∞—Ö, –Ω–µ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
    byte_length = len(data_str.encode('utf-8'))
    message = f'{byte_length}\n{data_str}\n'
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º STDIO: {data.get('method', 'unknown')}")
    print(f"  –î–ª–∏–Ω–∞ –≤ –±–∞–π—Ç–∞—Ö: {byte_length}")
    try:
        proc.stdin.write(message)
        proc.stdin.flush()
        print(f"  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

def read_message_stdio(proc, timeout=10):
    """–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ STDIO —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π UTF-8 –∏ —Ç–∞–π–º–∞—É—Ç–æ–º"""
    if proc.stdout is None:
        print("‚ö†Ô∏è  –û—à–∏–±–∫–∞: stdout –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return None
        
    try:
        print("  üìù –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∂–∏–≤
        if proc.poll() is not None:
            print(f"  ‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {proc.returncode}")
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è
        import select
        import os
        
        # –ù–∞ Windows select –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å pipes, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
        if os.name == 'nt':  # Windows
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
            import time
            start_time = time.time()
            
            # –ß–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É –≤ –±–∞–π—Ç–∞—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞
            length_line = None
            while time.time() - start_time < timeout:
                if proc.poll() is not None:
                    print(f"  ‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {proc.returncode}")
                    return None
                    
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
                    length_line = proc.stdout.readline()
                    if length_line:
                        break
                except:
                    pass
                time.sleep(0.1)
        else:
            # –ù–∞ Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º select
            ready, _, _ = select.select([proc.stdout], [], [], timeout)
            if not ready:
                print(f"  ‚è∞ –¢–∞–π–º–∞—É—Ç {timeout}—Å –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                return None
            length_line = proc.stdout.readline()
        
        print(f"  –ü–æ–ª—É—á–µ–Ω–∞ –¥–ª–∏–Ω–∞: {length_line!r}")
        if not length_line:
            print("  ‚ö†Ô∏è  –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω—ã")
            return None
        
        try:
            byte_length = int(length_line.strip())
            print(f"  –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {byte_length} –±–∞–π—Ç")
        except ValueError:
            print(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏–Ω—ã: {length_line!r}")
            return None
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞
        if os.name == 'nt':  # Windows
            start_time = time.time()
            message_str = ""
            while len(message_str) < byte_length and time.time() - start_time < timeout:
                if proc.poll() is not None:
                    print(f"  ‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {proc.returncode}")
                    return None
                try:
                    chunk = proc.stdout.read(byte_length - len(message_str))
                    if chunk:
                        message_str += chunk
                except:
                    pass
                if len(message_str) < byte_length:
                    time.sleep(0.1) 
        else:
            message_str = proc.stdout.read(byte_length)
            
        if len(message_str) != byte_length:
            print(f"  ‚ö†Ô∏è  –û–∂–∏–¥–∞–ª–æ—Å—å {byte_length} —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(message_str)}")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º \n
        try:
            proc.stdout.read(1)
        except:
            pass
        
        print(f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: {len(message_str)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {message_str[:100]!r}...")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            parsed_json = json.loads(message_str)
            print("  ‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
            return parsed_json
        except json.JSONDecodeError as je:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {je}")
            print(f"  –ü—Ä–æ–±–ª–µ–º–Ω—ã–π JSON: {message_str}")
            return None
        
    except UnicodeDecodeError as ude:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Unicode: {ude}")
        return None
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è STDIO: {e}")
        import traceback
        traceback.print_exc()
        return None

def send_message_tcp(sock, data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ TCP"""
    data_str = json.dumps(data, ensure_ascii=False)
    data_bytes = data_str.encode('utf-8')
    message = f'{len(data_bytes)}\n'.encode('utf-8') + data_bytes + b'\n'
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º TCP: {data.get('method', 'unknown')}")
    sock.sendall(message)

def read_message_tcp(sock, timeout=5.0):
    """–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ TCP"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è
        sock.settimeout(timeout)
        
        # –ß–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É
        length_bytes = b''
        while b'\n' not in length_bytes:
            chunk = sock.recv(1)
            if not chunk:
                return None
            length_bytes += chunk
        
        length = int(length_bytes.decode('utf-8').strip())
        print(f"TCP - –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {length} –±–∞–π—Ç")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        content_bytes = b''
        while len(content_bytes) < length:
            remaining = length - len(content_bytes)
            chunk = sock.recv(min(remaining, 4096))
            if not chunk:
                return None
            content_bytes += chunk
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º \n –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        sock.recv(1)
        
        content = content_bytes.decode('utf-8')
        print(f"TCP - –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return json.loads(content)
    except socket.timeout:
        print(f"TCP - –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ (timeout={timeout}—Å)")
        return None
    except Exception as e:
        print(f"TCP - –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        return None

def display_search_results(results, search_type="search"):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    if not results:
        print("  ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print("  " + "="*60)
    
    for i, result in enumerate(results, 1):
        print(f"  üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç {i}:")
        
        if 'title' in result:
            print(f"     üè∑Ô∏è  –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title']}")
        
        if 'body' in result:
            body = result['body'][:150] + "..." if len(result.get('body', '')) > 150 else result.get('body', '')
            print(f"     üìù –û–ø–∏—Å–∞–Ω–∏–µ: {body}")
        
        if 'url' in result:
            print(f"     üîó URL: {result['url']}")
        elif 'href' in result:
            print(f"     üîó URL: {result['href']}")
            
        if 'date' in result:
            print(f"     üìÖ –î–∞—Ç–∞: {result['date']}")
            
        if 'source' in result:
            print(f"     üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
            
        if '_note' in result:
            print(f"     ‚ÑπÔ∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {result['_note']}")
            
        print("  " + "-"*60)

def run_russian_news_test():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("\nüá∑üá∫ === –¢–ï–°–¢ –†–£–°–°–ö–ò–• –ù–û–í–û–°–¢–ï–ô === üá∑üá∫")
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ä–µ–∂–∏–º–µ STDIO
    try:
        proc = subprocess.Popen(
            [sys.executable, 'ddg_mcp_server.py'],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            encoding='utf-8',
            errors='replace',
            bufsize=0  # –û—Ç–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é
        )
        print(f"  ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å PID: {proc.pid}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤
    if proc.poll() is not None:
        print(f"  ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {proc.returncode}")
        return
    
    # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    time.sleep(0.5)
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("\nüìã 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞...")
        send_message_stdio(proc, {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "initialize",
            "params": {}
        })
        
        response = read_message_stdio(proc)
        if response and 'result' in response:
            print("   ‚úÖ –°–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {response}")
            return
        
        # 2. –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏
        russian_queries = [
            {
                "id": 2,
                "query": "–Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏",
                "region": "ru-ru",
                "description": "–û–±—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏"
            },
            {
                "id": 3,
                "query": "–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ú–æ—Å–∫–≤—ã",
                "region": "ru-ru", 
                "description": "–ù–æ–≤–æ—Å—Ç–∏ —Å—Ç–æ–ª–∏—Ü—ã"
            },
            {
                "id": 4,
                "query": "—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                "region": "ru-ru",
                "description": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
            },
            {
                "id": 5,
                "query": "—Å–ø–æ—Ä—Ç –†–æ—Å—Å–∏—è",
                "region": "ru-ru",
                "description": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"
            }
        ]
        
        for test_case in russian_queries:
            print(f"\nüì∞ {test_case['id']}. –ü–æ–∏—Å–∫: {test_case['description']}")
            print(f"   –ó–∞–ø—Ä–æ—Å: '{test_case['query']}' (—Ä–µ–≥–∏–æ–Ω: {test_case['region']})")
            
            send_message_stdio(proc, {
                "jsonrpc": "2.0",
                "id": test_case['id'],
                "method": "tools/call",
                "params": {
                    "name": "ddg_search_news",
                    "arguments": {
                        "query": test_case['query'],
                        "region": test_case['region'],
                        "max_results": 3
                    }
                }
            })
            
            response = read_message_stdio(proc)
            
            if response and 'result' in response:
                try:
                    content = response['result']['content'][0]['text']
                    results = json.loads(content)
                    display_search_results(results, "news")
                except (KeyError, json.JSONDecodeError, IndexError) as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                    print(f"   üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response}")
            elif response and 'error' in response:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response['error']}")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        print(f"\nüîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        if proc.poll() is None:
            print("  üö´ –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
            proc.terminate()
            time.sleep(1)
            if proc.poll() is None:
                print("  ‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                proc.kill()
        
        # –í—ã–≤–æ–¥–∏–º stderr —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        try:
            if proc.stderr is not None:
                stderr_output = proc.stderr.read()
                if stderr_output:
                    print(f"\nüìã STDERR —Å–µ—Ä–≤–µ—Ä–∞:\n{stderr_output}")
                else:
                    print("\nüìã STDERR —Å–µ—Ä–≤–µ—Ä–∞: –ø—É—Å—Ç")
        except Exception as e:
            print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è stderr: {e}")

def run_stdio_test():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ STDIO —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ STDIO ===")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ä–µ–∂–∏–º–µ STDIO (–±–µ–∑ TTY)
    try:
        proc = subprocess.Popen(
            [sys.executable, 'ddg_mcp_server.py'],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            encoding='utf-8'
        )
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å PID: {proc.pid}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None
    
    try:
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        requests = [
            # Initialize –∑–∞–ø—Ä–æ—Å
            {
                "jsonrpc": "2.0",
                "id": 1,
                "method": "initialize",
                "params": {}
            },
            # –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
            {
                "jsonrpc": "2.0",
                "id": 2,
                "method": "tools/call",
                "params": {
                    "name": "ddg_search_text",
                    "arguments": {
                        "query": "python programming",
                        "max_results": 3
                    }
                }
            },
            # –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            {
                "jsonrpc": "2.0",
                "id": 3,
                "method": "tools/list",
                "params": {}
            }
        ]
        
        responses = []
        
        for i, request in enumerate(requests):
            request["id"] = i + 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∂–∏–≤
            if proc.poll() is not None:
                print(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {proc.returncode}")
                break
                
            print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å {i+1}/{len(requests)}: {request['method']}")
            send_message_stdio(proc, request)
            
            print(f"üì¨ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ {request['method']}...")
            response = read_message_stdio(proc, timeout=15)  # 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            if response:
                responses.append(response)
                print(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ {request['method']} (ID: {request['id']}): –ø–æ–ª—É—á–µ–Ω")
                print(f"   –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {'result' if 'result' in response else 'error' if 'error' in response else 'unknown'}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ {request['method']}")
                responses.append(None)
            
            print("-" * 50)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã STDIO —Ç–µ—Å—Ç–∞:")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {len([r for r in responses if r is not None])}/{len(requests)}")
        
        return responses
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ STDIO —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return None
    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        if proc.poll() is None:
            print("üö´ –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
            proc.terminate()
            time.sleep(1)
            if proc.poll() is None:
                print("‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                proc.kill()

def run_tcp_test():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ TCP"""
    print("–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è TCP —Å–µ—Ä–≤–µ—Ä–∞")
    print("="*40)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.settimeout(5.0)  # 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É 127.0.0.1:8765...")
        client.connect(('127.0.0.1', 8765))
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ!")
        
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("\n–¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        init_request = {
            "jsonrpc": "2.0",
            "method": "initialize",
            "params": {
                "protocolVersion": "2024-11-05",
                "capabilities": {},
                "clientInfo": {
                    "name": "test-client",
                    "version": "1.0.0"
                }
            },
            "id": 1
        }
        send_message_tcp(client, init_request)
        
        response = read_message_tcp(client)
        if response:
            print(f"‚úì –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.get('result', {}).get('protocolVersion', 'unknown')}")
        else:
            print("‚úó –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        
        # –¢–µ—Å—Ç 2: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        print("\n–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        tools_request = {
            "jsonrpc": "2.0",
            "method": "tools/list",
            "params": {},
            "id": 2
        }
        send_message_tcp(client, tools_request)
        
        response = read_message_tcp(client)
        if response and 'result' in response:
            tools = response['result'].get('tools', [])
            print(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
            for tool in tools:
                print(f"  - {tool['name']}")
        else:
            print("‚úó –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
        print("\n–¢–µ—Å—Ç 3: –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ 'Python tutorial'")
        search_request = {
            "jsonrpc": "2.0",
            "method": "tools/call",
            "params": {
                "name": "ddg_search_text",
                "arguments": {
                    "query": "Python tutorial",
                    "max_results": 2
                }
            },
            "id": 3
        }
        send_message_tcp(client, search_request)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
        response = read_message_tcp(client, timeout=30.0)
        if response and 'result' in response:
            content = response['result'].get('content', [])
            if content:
                print(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(content)}")
                for item in content:
                    if item.get('type') == 'text':
                        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                        text = item.get('text', '')[:100]
                        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {text}...")
            else:
                print("‚úì –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
        else:
            print("‚úó –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        
        # –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        print("\n–¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π '–Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏'")
        news_request = {
            "jsonrpc": "2.0",
            "method": "tools/call",
            "params": {
                "name": "ddg_search_news",
                "arguments": {
                    "query": "–Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏",
                    "region": "ru-ru",
                    "max_results": 2
                }
            },
            "id": 4
        }
        send_message_tcp(client, news_request)
        
        response = read_message_tcp(client, timeout=30.0)
        if response and 'result' in response:
            content = response['result'].get('content', [])
            if content:
                print(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(content)}")
                for item in content:
                    if item.get('type') == 'text':
                        text = item.get('text', '')[:100]
                        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {text}...")
            else:
                print("‚úì –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
        else:
            print("‚úó –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        
        print("\n" + "="*40)
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except ConnectionRefusedError:
        print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (python tcp_ddg_server.py)")
        return None
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        return None
    finally:
        try:
            client.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except:
            pass

def run_interactive_test():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞)"""
    print("=== –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===")
    print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print("  python ddg_mcp_server.py")
    print("–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É:")
    print()
    print("1. Initialize:")
    print('{"jsonrpc": "2.0", "id": 1, "method": "initialize", "params": {}}')
    print()
    print("2. Tools list:")
    print('{"jsonrpc": "2.0", "id": 2, "method": "tools/list", "params": {}}')
    print()
    print("3. Search:")
    print('{"jsonrpc": "2.0", "id": 3, "method": "tools/call", "params": {"name": "ddg_search_text", "arguments": {"query": "python programming", "max_results": 3}}}')
    print()
    print("4. –†—É—Å—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:")
    print('{"jsonrpc": "2.0", "id": 4, "method": "tools/call", "params": {"name": "ddg_search_news", "arguments": {"query": "–Ω–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏", "region": "ru-ru", "max_results": 3}}}')
    print()
    print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ: quit")

def main():
    print("üîß === –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ì–û –°–ö–†–ò–ü–¢–ê ===")
    print(f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {sys.argv}")
    try:
        print("DEBUG: main() function started")
    except (ValueError, OSError):
        pass
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python test_server_enhanced.py stdio     - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ STDIO")
        print("  python test_server_enhanced.py tcp       - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ TCP")
        print("  python test_server_enhanced.py interactive - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("  python test_server_enhanced.py russian   - —Ç–µ—Å—Ç —Ä—É—Å—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        print("  python test_server_enhanced.py all       - –≤—Å–µ —Ç–µ—Å—Ç—ã")
        try:
            print("DEBUG: Returning due to no arguments")
        except (ValueError, OSError):
            pass
        return
    
    test_type = sys.argv[1]
    print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: {test_type}")
    try:
        print(f"DEBUG: Processing test type: {test_type}")
    except (ValueError, OSError):
        pass
    
    if test_type == "stdio":
        print("üöÄ –ó–∞–ø—É—Å–∫ STDIO —Ç–µ—Å—Ç–∞...")
        run_stdio_test()
    elif test_type == "tcp":
        print("üöÄ –ó–∞–ø—É—Å–∫ TCP —Ç–µ—Å—Ç–∞...")
        run_tcp_test()
    elif test_type == "interactive":
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
        run_interactive_test()
    elif test_type == "russian":
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä—É—Å—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")
        run_russian_news_test()
    elif test_type == "all":
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...")
        try:
            print("DEBUG: About to start test sequence")
        except (ValueError, OSError):
            pass
        
        print("1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç:")
        try:
            run_interactive_test()
            print("DEBUG: Interactive test completed")
        except Exception as e:
            print(f"DEBUG: Interactive test failed: {e}")
        
        try:
            print("\n" + "="*60 + "\n")
        except (ValueError, OSError):
            pass
        
        print("2. –ö—Ä–∞—Ç–∫–∏–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ STDIO):")
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
            proc = subprocess.Popen(
                [sys.executable, 'ddg_mcp_server.py'],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                encoding='utf-8'
            )
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —Å PID: {proc.pid}")
            
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç 2 —Å–µ–∫—É–Ω–¥—ã
            time.sleep(2)
            if proc.poll() is None:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
            else:
                print(f"‚ùå –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {proc.returncode}")
            
            proc.terminate()
            print("DEBUG: Simple server test completed")
        except Exception as e:
            print(f"DEBUG: Simple server test failed: {e}")
        
        try:
            print("\n" + "="*60 + "\n")
        except (ValueError, OSError):
            pass
        
        print("3. TCP —Ç–µ—Å—Ç (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º - —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏–π TCP —Å–µ—Ä–≤–µ—Ä):")
        print("‚ö†Ô∏è  TCP —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω - –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'python tcp_ddg_server.py' –¥–ª—è —Ç–µ—Å—Ç–∞")
        
        try:
            print("\n" + "="*60 + "\n")
        except (ValueError, OSError):
            pass
        
        print("4. –ö—Ä–∞—Ç–∫–∏–π —Ç–µ—Å—Ç —Ä—É—Å—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:")
        try:
            # –û—á–µ–Ω—å –∫—Ä–∞—Ç–∫–∏–π —Ç–µ—Å—Ç - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º import
            from ddg_mcp_server import fix_encoding
            test_text = "–†—å–†—ï–†–Ü–†¬µ–°–É–°‚Äö–†–∏"  # –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞
            fixed = fix_encoding(test_text)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ I/O
            safe_print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è fix_encoding —Ä–∞–±–æ—Ç–∞–µ—Ç: '{test_text[:20]}...' -> '{fixed[:20]}...'")
            safe_print("DEBUG: Encoding test completed")
        except Exception as e:
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏
            error_msg = str(e)[:100] if len(str(e)) > 100 else str(e)
            safe_print(f"DEBUG: Encoding test failed: {error_msg}...")
        
        try:
            print("\n" + "="*60 + "\n")
        except (ValueError, OSError):
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ I/O, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
        try:
            print("–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è).")
            print("üìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print("   python test_server_enhanced.py russian   - –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä—É—Å—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            print("   python test_server_enhanced.py stdio     - –¥–ª—è STDIO —Ç–µ—Å—Ç–∞")
        except (ValueError, OSError):
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ I/O, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
        try:
            print("DEBUG: All tests sequence completed")
        except (ValueError, OSError):
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ I/O, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: {test_type}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: stdio, tcp, interactive, russian, all")
    
    try:
        print("\n‚úÖ –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ï–ù")
        print("DEBUG: main() function completed successfully")
    except (ValueError, OSError):
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ I/O, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        pass

if __name__ == "__main__":
    main()