#!/usr/bin/env python3
import json
import socket
import threading
import sys
import os
import signal
import time
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%H:%M:%S',
    handlers=[
        logging.StreamHandler(sys.stdout)  # –í—ã–≤–æ–¥–∏–º –≤ stdout –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
    ]
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists('ddg_mcp_server.py'):
        logger.error("‚úó –§–∞–π–ª ddg_mcp_server.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
        
    from ddg_mcp_server import handle_request
    logger.info("‚úì –ú–æ–¥—É–ª—å ddg_mcp_server —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not callable(handle_request):
        logger.error("‚úó –§—É–Ω–∫—Ü–∏—è handle_request –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º–∞")
        sys.exit(1)
        
except ImportError as e:
    logger.error(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ddg_mcp_server: {e}")
    print("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ddg_mcp_server. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ.")
    sys.exit(1)
except Exception as e:
    logger.error(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
    sys.exit(1)


def send_message_tcp(conn, data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ TCP —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ensure_ascii=False –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode
        data_str = json.dumps(data, ensure_ascii=False)
        data_bytes = data_str.encode('utf-8')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (length + content + newline) –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
        message = f'{len(data_bytes)}\n'.encode('utf-8') + data_bytes + b'\n'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        conn.sendall(message)
        logger.debug(f"‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(data_bytes)} –±–∞–π—Ç): {data_str[:100]}...")
        
    except ConnectionResetError:
        logger.warning("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        raise
    except socket.error as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        raise
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise
    
    
def read_message(conn):
    """–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ TCP —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        conn.settimeout(30)
        
        # –°—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–æ newline —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        first_line_bytes = b''
        start_time = time.time()
        
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –≤—Ä—É—á–Ω—É—é
            if time.time() - start_time > 30:
                logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏")
                return None
                
            try:
                chunk = conn.recv(1)
                if not chunk:
                    logger.debug("üì¥ –ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                    return None
                    
                if chunk == b'\n':
                    break
                    
                first_line_bytes += chunk
                
                # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(first_line_bytes) > 102400:  # 100KB –ª–∏–º–∏—Ç
                    logger.error("‚úó –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è")
                    return None
                    
            except socket.timeout:
                logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç socket.recv()")
                return None
            except ConnectionResetError:
                logger.warning("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º")
                return None
            except socket.error as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞: {e}")
                return None
        
        if not first_line_bytes:
            logger.debug("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞")
            return None
            
        try:
            first_line = first_line_bytes.decode('utf-8').strip()
        except UnicodeDecodeError as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è UTF-8: {e}")
            return None
            
        logger.debug(f"üìù –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {first_line[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —á–∏—Å–ª–æ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) –∏–ª–∏ JSON (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        content = None
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
            length = int(first_line)
            logger.debug(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, –¥–ª–∏–Ω–∞: {length} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–ª–∏–Ω—ã
            if length < 0 or length > 10485760:  # 10MB –ª–∏–º–∏—Ç
                logger.error(f"‚úó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {length}")
                return None
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            content_bytes = b''
            read_start = time.time()
            
            while len(content_bytes) < length:
                if time.time() - read_start > 30:
                    logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    return None
                    
                try:
                    remaining = length - len(content_bytes)
                    chunk = conn.recv(min(remaining, 4096))
                    if not chunk:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ, –ø–æ–ª—É—á–µ–Ω–æ {len(content_bytes)} –∏–∑ {length} –±–∞–π—Ç")
                        return None
                    content_bytes += chunk
                except (socket.timeout, ConnectionResetError, socket.error) as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {e}")
                    return None
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π newline
            try:
                trailing = conn.recv(1)
                if trailing and trailing != b'\n':
                    logger.debug(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è newline, –ø–æ–ª—É—á–µ–Ω: {trailing!r}")
            except:
                pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            
            try:
                content = content_bytes.decode('utf-8')
            except UnicodeDecodeError as e:
                logger.error(f"‚úó –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")
                return None
                
        except ValueError:
            # –ù–µ —á–∏—Å–ª–æ - –ø—Ä–æ–±—É–µ–º –∫–∞–∫ JSON (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
            logger.debug("üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π MCP —Ñ–æ—Ä–º–∞—Ç")
            content = first_line
        
        if not content:
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return None
        
        logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤): {content[:200]}...")
        
        try:
            return json.loads(content)
        except json.JSONDecodeError as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.error(f"‚úó –ü—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {content[:200]!r}")
            return None
        
    except Exception as e:
        logger.error(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ read_message: {e}")
        import traceback
        traceback.print_exc()
        return None

def handle_client(conn, addr):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    logger.info(f"‚úì –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {addr}")
    print(f"\n{'='*60}")
    print(f"[+] –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {addr[0]}:{addr[1]}")
    print(f"{'='*60}")
    
    request_count = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ä–∞–∑—É
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º keep-alive –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            conn.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
            logger.debug(f"‚úì Keep-alive –≤–∫–ª—é—á–µ–Ω –¥–ª—è {addr}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å keep-alive: {e}")
        
        # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç MCP –∫–ª–∏–µ–Ω—Ç–∞
        logger.info(f"üîÑ –û–∂–∏–¥–∞–µ–º MCP —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {addr}")
        
        request_count = 0
        while True:
            try:
                message = read_message(conn)
                if message is None:
                    logger.info(f"üì¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º {addr}")
                    break
                
                request_count += 1
                method = message.get('method', 'unknown')
                request_id = message.get('id', 'no-id')
                
                print(f"\n[‚Üê] –ó–∞–ø—Ä–æ—Å #{request_count} (ID: {request_id}): {method}")
                logger.info(f"üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {method} –æ—Ç {addr}")
                
                # –í—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if 'params' in message:
                    params = message['params']
                    if method == 'tools/call':
                        tool_name = params.get('name', 'unknown')
                        print(f"    ‚îî‚îÄ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")
                        if 'arguments' in params:
                            args = params['arguments']
                            if 'query' in args:
                                print(f"    ‚îî‚îÄ –ó–∞–ø—Ä–æ—Å: '{args['query']}'")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –º–µ—Ä–æ–π –≤—Ä–µ–º–µ–Ω–∏
                start_time = time.time()
                try:
                    response = handle_request(message)
                    elapsed = time.time() - start_time
                    logger.debug(f"‚úì –ó–∞–ø—Ä–æ—Å {method} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {elapsed:.3f}—Å")
                except Exception as e:
                    elapsed = time.time() - start_time
                    logger.error(f"‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ {method}: {e}")
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
                    response = {
                        "jsonrpc": "2.0",
                        "id": request_id,
                        "error": {
                            "code": -32603,
                            "message": f"Internal error: {str(e)}"
                        }
                    }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                if response:
                    try:
                        if 'error' in response:
                            print(f"[‚úó] –û—à–∏–±–∫–∞: {response['error'].get('message', 'Unknown error')}")
                            logger.error(f"‚úó –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {response['error']}")
                        else:
                            print(f"[‚Üí] –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–æ–±—Ä–∞–±–æ—Ç–∫–∞: {elapsed:.2f}—Å)")
                            logger.info(f"‚úì –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
                            
                        send_message_tcp(conn, response)
                        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        time.sleep(0.01)
                        
                    except Exception as e:
                        logger.error(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                else:
                    logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç handle_request")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
                    error_response = {
                        "jsonrpc": "2.0",
                        "id": request_id,
                        "error": {
                            "code": -32603,
                            "message": "Internal error: empty response"
                        }
                    }
                    try:
                        send_message_tcp(conn, error_response)
                    except Exception as e:
                        logger.error(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ error_response: {e}")
                        break
                        
            except Exception as e:
                logger.error(f"‚úó –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                break
                
    except ConnectionResetError:
        print(f"\n[!] –ö–ª–∏–µ–Ω—Ç {addr} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {addr} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    except Exception as e:
        print(f"\n[!] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ {addr}: {e}")
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ {addr}: {e}", exc_info=True)
    finally:
        try:
            conn.close()
        except:
            pass
        print(f"\n[-] –ö–ª–∏–µ–Ω—Ç {addr[0]}:{addr[1]} –æ—Ç–∫–ª—é—á–∏–ª—Å—è (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {request_count})")
        print(f"{'='*60}\n")
        logger.info(f"üì¥ –ö–ª–∏–µ–Ω—Ç {addr} –æ—Ç–∫–ª—é—á–∏–ª—Å—è (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {request_count} –∑–∞–ø—Ä–æ—Å–æ–≤)")

def main():
    """–ó–∞–ø—É—Å–∫ TCP-—Å–µ—Ä–≤–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é MCP"""
    print("\n" + "="*60)
    print("      DuckDuckGo MCP TCP Server")
    print("="*60)
    
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    server.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
    server.settimeout(1.0)  # –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è accept()
    
    try:
        server.bind(('127.0.0.1', 8765))
        server.listen(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        
        print(f"\n[‚úì] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: 127.0.0.1:8765")
        print(f"[‚úì] –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"[i] –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print(f"[i] MCP –ø—Ä–æ—Ç–æ–∫–æ–ª: JSON-RPC 2.0 —á–µ—Ä–µ–∑ TCP")
        print("\n" + "="*60)
        print("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...\n")
        
        logger.info("TCP —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ 127.0.0.1:8765")
        
        connection_count = 0
        while True:
            try:
                conn, addr = server.accept()
                connection_count += 1
                print(f"\n[‚òÖ] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #{connection_count} –æ—Ç {addr[0]}:{addr[1]}")
                
                # –î–µ–ª–∞–µ–º –ø–æ—Ç–æ–∫–∏ daemon, —á—Ç–æ–±—ã –æ–Ω–∏ –∑–∞–≤–µ—Ä—à–∞–ª–∏—Å—å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                thread = threading.Thread(
                    target=handle_client, 
                    args=(conn, addr), 
                    daemon=True,
                    name=f"Client-{addr[0]}:{addr[1]}"
                )
                thread.start()
                logger.info(f"–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ {addr}")
                
            except socket.timeout:
                # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                continue
            except KeyboardInterrupt:
                print("\n\n" + "="*60)
                print("[!] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
                print("="*60)
                break
                
    except OSError as e:
        if e.errno == 10048:  # Windows: –ø–æ—Ä—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            print(f"\n" + "="*60)
            print("[‚úó] –û–®–ò–ë–ö–ê: –ü–æ—Ä—Ç 8765 —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!")
            print("="*60)
            print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
            print("  1. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞")
            print("  2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫")
            print("  3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞:")
            print("     netstat -ano | findstr :8765")
            logger.error(f"–ü–æ—Ä—Ç 8765 —É–∂–µ –∑–∞–Ω—è—Ç")
        else:
            print(f"\n[‚úó] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    except Exception as e:
        print(f"\n[‚úó] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        print("\n" + "="*60)
        print("[...] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        server.close()
        print("[‚úì] –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"[‚úì] –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*60 + "\n")
        logger.info("TCP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        try:
            import ddgs
            logger.info("‚úì –ú–æ–¥—É–ª—å ddgs —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print("\n[‚úó] –û–®–ò–ë–ö–ê: –ú–æ–¥—É–ª—å 'ddgs' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: pip install ddgs")
            sys.exit(1)
            
        main()
    except KeyboardInterrupt:
        print("\n[‚úì] –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n[‚úó] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
